CREATE TABLE EQUIPMENT 
(
  EQUIPMENT_ID NUMBER(5) NOT NULL 
, EQUIPMENT_TYPE_CODE CHAR(2) NOT NULL 
, ROOM_CODE VARCHAR2(10) NOT NULL 
, COMMENTARY VARCHAR2(100) 
, CONSTRAINT EQUIPMENT_PK PRIMARY KEY 
  (
    EQUIPMENT_ID 
  )
  ENABLE 
);

CREATE TABLE EQUIPMENT_TYPE 
(
  EQUIPMENT_TYPE_CODE CHAR(2) NOT NULL 
, EQUIPMENT_TYPE_NAME VARCHAR2(20) NOT NULL 
, CONSTRAINT EQUIPMENT_TYPE_PK PRIMARY KEY 
  (
    EQUIPMENT_TYPE_CODE 
  )
  ENABLE 
);

CREATE TABLE USERS 
(
  USER_ID NUMBER(10) NOT NULL 
, PRIVILEGE_LEVEL CHAR(1) NOT NULL 
, FIRSTNAME VARCHAR2(20) NOT NULL 
, LASTNAME VARCHAR2(30) NOT NULL 
, DOCUMENT_TYPE CHAR(2) 
, DOCUMENT_ID VARCHAR2(10) 
, CONSTRAINT USERS_PK PRIMARY KEY 
  (
    USER_ID 
  )
  ENABLE 
);

CREATE TABLE RESERVATION_HISTORY 
(
  ROOM_CODE VARCHAR2(10) NOT NULL 
, DATE_FROM DATE NOT NULL 
, USER_ID NUMBER(10) NOT NULL 
, DATE_TO DATE NOT NULL 
, INSERTING_USER_ID NUMBER(10) NOT NULL 
, INSERT_DATE DATE NOT NULL 
);

CREATE TABLE ROOMS 
(
  ROOM_CODE VARCHAR2(10) NOT NULL 
, PRIVILEGE_LEVEL CHAR(1) NOT NULL 
, SEAT_COUNT NUMBER(3) NOT NULL 
, COMMENTARY VARCHAR2(100) 
, CONSTRAINT ROOMS_PK PRIMARY KEY 
  (
    ROOM_CODE 
  )
  ENABLE 
);

CREATE TABLE RESERVATIONS 
(
  ROOM_CODE VARCHAR2(10) NOT NULL 
, USER_ID NUMBER(10) NOT NULL 
, DATE_FROM DATE NOT NULL 
, DATE_TO DATE NOT NULL 
, CONSTRAINT RESERVATIONS_PK PRIMARY KEY 
  (
    ROOM_CODE 
  , USER_ID 
  , DATE_FROM 
  )
  ENABLE 
);

ALTER TABLE EQUIPMENT
ADD CONSTRAINT EQUIP_EQUIPTYPE_FK FOREIGN KEY
(
  EQUIPMENT_TYPE_CODE 
)
REFERENCES EQUIPMENT_TYPE
(
  EQUIPMENT_TYPE_CODE 
)
ENABLE;

ALTER TABLE EQUIPMENT
ADD CONSTRAINT EQUIP_ROOM_FK FOREIGN KEY
(
  ROOM_CODE 
)
REFERENCES ROOMS
(
  ROOM_CODE 
)
ENABLE;

ALTER TABLE RESERVATIONS
ADD CONSTRAINT RESERVATIONS_ROOMS_FK FOREIGN KEY
(
  ROOM_CODE 
)
REFERENCES ROOMS
(
  ROOM_CODE 
)
ENABLE;

ALTER TABLE RESERVATIONS
ADD CONSTRAINT RESERVATIONS_USERS_FK FOREIGN KEY
(
  USER_ID 
)
REFERENCES USERS
(
  USER_ID 
)
ENABLE;

ALTER TABLE EQUIPMENT_TYPE
ADD CONSTRAINT EQUIPMENT_TYPE_CODE_CHK CHECK 
(EQUIPMENT_TYPE_CODE = UPPER(EQUIPMENT_TYPE_CODE))
ENABLE;

ALTER TABLE EQUIPMENT_TYPE
ADD CONSTRAINT EQUIPMENT_TYPE_NAME_CHK CHECK 
(EQUIPMENT_TYPE_NAME = UPPER(EQUIPMENT_TYPE_NAME))
ENABLE;

ALTER TABLE USERS
ADD CONSTRAINT USERS_FNAME_CHK CHECK 
(FIRSTNAME = UPPER(FIRSTNAME))
ENABLE;

ALTER TABLE USERS
ADD CONSTRAINT USERS_LNAME_CHK CHECK 
(LASTNAME = UPPER(LASTNAME))
ENABLE;

ALTER TABLE USERS
ADD CONSTRAINT USERS_PRIVILEGE_CHK CHECK 
(PRIVILEGE_LEVEL = 'S' OR PRIVILEGE_LEVEL = 'T' OR PRIVILEGE_LEVEL = 'A')
ENABLE;

ALTER TABLE ROOMS
ADD CONSTRAINT ROOMS_PRIVILEGE_CHK CHECK 
(PRIVILEGE_LEVEL = 'S' OR PRIVILEGE_LEVEL = 'T' OR PRIVILEGE_LEVEL = 'A')
ENABLE;

ALTER TABLE RESERVATIONS
ADD CONSTRAINT RESERVATIONS_DATE_CHK CHECK 
(DATE_TO > DATE_FROM)
ENABLE;

ALTER TABLE RESERVATIONS
ADD CONSTRAINT RESERVATIONS_ROOM_CODE_CHK CHECK 
(ROOM_CODE = UPPER(ROOM_CODE))
ENABLE;

COMMENT ON TABLE RESERVATION_HISTORY IS 'Journal table for reservations. Stores reservations and ID of user who created it';

COMMENT ON COLUMN USERS.USER_ID IS 'Artifical user''s identifier, not his document number';

COMMENT ON COLUMN USERS.PRIVILEGE_LEVEL IS 'User''s privilege level - decides what types of room user can reserve - one of S - student, T - teacher, A - admin';

COMMENT ON COLUMN RESERVATION_HISTORY.USER_ID IS 'Id of user for whom room is reserved';

COMMENT ON COLUMN RESERVATION_HISTORY.INSERTING_USER_ID IS 'ID of user who reserved/changed reservation';

COMMENT ON COLUMN ROOMS.PRIVILEGE_LEVEL IS 'Minimum privilege level needed to reserve the room (one of S - student / T - teacher / A - admin)';

COMMENT ON COLUMN RESERVATIONS.USER_ID IS 'ID of user for whom the room is reserved';

CREATE INDEX EQUIPMENT_EQUIPMENT_TYPE_INDEX ON EQUIPMENT (EQUIPMENT_TYPE_CODE);

CREATE INDEX EQUIPMENT_ROOM_INDEX ON EQUIPMENT (ROOM_CODE);

CREATE INDEX RESERVATIONS_USERS_INDEX ON RESERVATIONS (USER_ID);

CREATE SEQUENCE EQUIPMENT_SEQUENCE;

CREATE SEQUENCE USERS_SEQUENCE;

CREATE OR REPLACE TRIGGER EQUIPMENT_ID_TRG BEFORE INSERT ON EQUIPMENT
FOR EACH ROW 
  WHEN (NEW.EQUIPMENT_ID IS NULL) BEGIN :NEW.EQUIPMENT_ID := EQUIPMENT_SEQUENCE.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER USERS_ID_TRG BEFORE INSERT ON USERS
FOR EACH ROW 
  WHEN (NEW.USER_ID IS NULL) BEGIN :NEW.USER_ID := USERS_SEQUENCE.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER RESERVATION_DATES_OVERLAPPING BEFORE INSERT OR UPDATE OF ROOM_CODE, DATE_TO, DATE_FROM ON RESERVATIONS
  FOR EACH ROW
  BEGIN 
  NULL;
END;

CREATE OR REPLACE TRIGGER PROPER_RESERVATION_PERMISSION BEFORE INSERT OR UPDATE ON RESERVATIONS
  FOR EACH ROW
  BEGIN 
  NULL;
END;